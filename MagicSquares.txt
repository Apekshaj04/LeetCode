Leetcode 840 : Magic Squares in Grid 

import java.util.HashSet;
import java.util.Set;

class Solution {


    private boolean checkMagicSquare(int[][] grid, int r, int c) {
         boolean[] visited = new boolean[10];
        int targetSum = 0;
    
        for (int i = 0; i < 3; i++) {
            int rowSum = 0;
            for (int j = 0; j < 3; j++) {
                int val = grid[r + i][c + j];
                if (val < 1 || val > 9 || visited[val]) {
                    return false;  
                }
                visited[val] = true;
                rowSum += val;
            }
            if (i == 0) {
                targetSum = rowSum;  
            } else if (rowSum != targetSum) {
                return false;  
            }
        }

        for (int j = 0; j < 3; j++) {
            int colSum = 0;
            for (int i = 0; i < 3; i++) {
                colSum += grid[r + i][c + j];
            }
            if (colSum != targetSum) {
                return false;  
            }
        }

        int d1 = grid[r][c] + grid[r + 1][c + 1] + grid[r + 2][c + 2];
        int d2 = grid[r][c + 2] + grid[r + 1][c + 1] + grid[r + 2][c];

        if (d1 != targetSum || d2 != targetSum) {
            return false;  
        }

        return true;  
    }

    public int numMagicSquaresInside(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int count = 0;

        for (int i = 0; i <= rows - 3; i++) {
            for (int j = 0; j <= cols - 3; j++) {
                if (checkMagicSquare(grid, i, j)) {
                    count++;
                }
            }
        }

        return count;
    }
}
